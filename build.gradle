apply plugin: 'java'
apply plugin: 'eclipse'
//apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'idea'
buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = "main.Main"

repositories {
    mavenCentral()
    maven {
        url "https://maven.imagej.net/content/repositories/public/"
    }
    maven {
        url "https://maven.repository.redhat.com/ga/"
    }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

sourceSets {
    single{
        java {
            srcDir 'src'

        }
    }
}

task compile(type: JavaCompile) {
    source = sourceSets.single.java
    sourceSets.main.java.srcDirs = ['src']
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = sourceSets.main.output.classesDirs[0]
}

//compileJava {
//    options.release = 15
//}
//java {
//    toolchain {
//        languageVersion.set(JavaLanguageVersion.of(15))
//    }
//}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'org.graphstream:gs-core:1.2'
    implementation 'org.graphstream:gs-algo:1.2'
    implementation 'org.graphstream:gs-ui:1.2'
//    implementation 'com.github.graphstream:gs-core:2.0-alpha'
//    implementation 'com.github.graphstream:gs-algo:2.0-alpha'
//    implementation 'com.github.graphstream:gs-ui-swing:2.0-alpha'
//    implementation 'org.graphstream:gs-ui:1.3'
    implementation 'org.apache.lucene:lucene-core:3.6.2.redhat-8'
    implementation 'org.apache.lucene:lucene-analyzers-common:4.0.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'
    // https://mvnrepository.com/artifact/org.python/jython
    implementation group: 'org.python', name: 'jython', version: '2.7.0'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation 'org.apache.commons:commons-collections4:4.4'
    // https://mvnrepository.com/artifact/com.kennycason/kumo
    implementation 'com.kennycason:kumo:1.5'
    // https://mvnrepository.com/artifact/edu.stanford.nlp/stanford-corenlp
    implementation 'edu.stanford.nlp:stanford-corenlp:4.4.0'
    implementation group: 'edu.stanford.nlp', name: 'stanford-corenlp', version: '4.4.0', classifier: 'models'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha7'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.8.5'
    // https://mvnrepository.com/artifact/net.sourceforge.jdatepicker/jdatepicker
    implementation 'net.sourceforge.jdatepicker:jdatepicker:1.3.2'
    // https://mvnrepository.com/artifact/org.jfree/jfreechart
    implementation 'org.jfree:jfreechart:1.5.3'
    implementation 'com.google.code.gson:gson:2.9.0'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'main.Main'
        )
    }
}


task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

shadowJar {
    archiveBaseName.set('shadow')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        inheritFrom project.tasks.fatJar.manifest
    }
}

version = '0.1.0'
